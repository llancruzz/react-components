{"ast":null,"code":"var _jsxFileName = \"/workspace/react-components/react-components/src/components/StatefulGreeting.js\";\nimport React from \"react\";\n\n// In order to use Class in react, you must to 'extends React.Component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class StatefulGreeting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setCount = () => {\n      this.setState(prevState => {\n        return {\n          count: prevState.count + 1\n        };\n      });\n    };\n    this.state = {\n      // Initial State. It will represent the initial values of anything the component might change either\n      // on its own or due to user interaction.\n      count: 0\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"greeting\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Hello, \", this.props.name, \", I'm a stateful component!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"You've clicked \", this.state.count, \" times\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.setCount,\n        children: \"Increment Count\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n/*\nUpdating the State:\n1.| Add the onClick attribute to the button\n2.| Write an event handler to listen for the click event\n3.| Use setState() in the event handler to update the state\n\nRules:\n1.| Never update the state directly, use the setState() method instead\n2.| Put any code in setState callback that needs to run after the state update\n3.| Use a callback function in setState with prevState if you need to update state based\non previos state values\n\nGeneral steps to updating state in React\n1.| Assign an event listener to an HTML element, i.e onClick to a button\n2.| Write an event handler,i.e handleClick or increment\n3.| Call setState properly from within the event handler to update the states\n*/","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","StatefulGreeting","Component","constructor","props","setCount","setState","prevState","count","state","render","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["/workspace/react-components/react-components/src/components/StatefulGreeting.js"],"sourcesContent":["import React from \"react\";\n\n// In order to use Class in react, you must to 'extends React.Component\nexport default class StatefulGreeting extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Initial State. It will represent the initial values of anything the component might change either\n      // on its own or due to user interaction.\n      count: 0\n    };\n  }\n\n  setCount = () => {\n    this.setState(prevState => {\n      return { count: prevState.count + 1 }\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"greeting\">\n        <h1>\n          Hello, {this.props.name}, I'm a stateful component!\n        </h1>\n        <h2>You've clicked {this.state.count} times</h2>\n        <button onClick={this.setCount}>Increment Count</button>\n      </div>\n    );\n  }\n}\n\n/*\nUpdating the State:\n1.| Add the onClick attribute to the button\n2.| Write an event handler to listen for the click event\n3.| Use setState() in the event handler to update the state\n\nRules:\n1.| Never update the state directly, use the setState() method instead\n2.| Put any code in setState callback that needs to run after the state update\n3.| Use a callback function in setState with prevState if you need to update state based\non previos state values\n\nGeneral steps to updating state in React\n1.| Assign an event listener to an HTML element, i.e onClick to a button\n2.| Write an event handler,i.e handleClick or increment\n3.| Call setState properly from within the event handler to update the states\n*/"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,eAAe,MAAMC,gBAAgB,SAASH,KAAK,CAACI,SAAS,CAAC;EAC5DC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAQfC,QAAQ,GAAG,MAAM;MACf,IAAI,CAACC,QAAQ,CAACC,SAAS,IAAI;QACzB,OAAO;UAAEC,KAAK,EAAED,SAAS,CAACC,KAAK,GAAG;QAAE,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC;IAXC,IAAI,CAACC,KAAK,GAAG;MACX;MACA;MACAD,KAAK,EAAE;IACT,CAAC;EACH;EAQAE,MAAMA,CAAA,EAAG;IACP,oBACEV,OAAA;MAAKW,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACvBZ,OAAA;QAAAY,QAAA,GAAI,SACK,EAAC,IAAI,CAACR,KAAK,CAACS,IAAI,EAAC,6BAC1B;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACLjB,OAAA;QAAAY,QAAA,GAAI,iBAAe,EAAC,IAAI,CAACH,KAAK,CAACD,KAAK,EAAC,QAAM;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAChDjB,OAAA;QAAQkB,OAAO,EAAE,IAAI,CAACb,QAAS;QAAAO,QAAA,EAAC;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACpD;EAEV;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
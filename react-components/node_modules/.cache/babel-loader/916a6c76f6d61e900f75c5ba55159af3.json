{"ast":null,"code":"var _jsxFileName = \"/workspace/react-components/react-components/src/components/EventBinding.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EventBinding extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      introduction: \"Hello!\",\n      buttonText: \"Exit\"\n    };\n  }\n  handleClick() {\n    this.setState({\n      introduction: \"Goodbye!\"\n    });\n    console.log(this.state.introduction);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [this.state.introduction, \" \", this.props.greeting]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleClick(),\n        children: this.state.buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default EventBinding;\n\n/*\nWays to bind event handlers\n1. Use an arrow function in the render method \n(if you need to pass a parameter to an event handler)\n2. I call bind on the handler with 'this'\n3. Bind the event handler in the constructor\n4. Define the handler as an arrow function (best practise and option)\n*/","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","EventBinding","Component","constructor","props","state","introduction","buttonText","handleClick","setState","console","log","render","children","greeting","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["/workspace/react-components/react-components/src/components/EventBinding.js"],"sourcesContent":["import React from \"react\";\n\nclass EventBinding extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            introduction: \"Hello!\",\n            buttonText: \"Exit\",\n        };\n    }\n\n    handleClick() {\n        this.setState({\n            introduction: \"Goodbye!\",\n        });\n        console.log(this.state.introduction);\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>\n                    {this.state.introduction} {this.props.greeting}\n                </h1>\n                <button onClick={() => this.handleClick()}>\n                    {this.state.buttonText}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default EventBinding;\n\n/*\nWays to bind event handlers\n1. Use an arrow function in the render method \n(if you need to pass a parameter to an event handler)\n2. I call bind on the handler with 'this'\n3. Bind the event handler in the constructor\n4. Define the handler as an arrow function (best practise and option)\n*/"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,SAASH,KAAK,CAACI,SAAS,CAAC;EAEvCC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,YAAY,EAAE,QAAQ;MACtBC,UAAU,EAAE;IAChB,CAAC;EACL;EAEAC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,CAAC;MACVH,YAAY,EAAE;IAClB,CAAC,CAAC;IACFI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,KAAK,CAACC,YAAY,CAAC;EACxC;EAEAM,MAAMA,CAAA,EAAG;IACL,oBACIZ,OAAA;MAAAa,QAAA,gBACIb,OAAA;QAAAa,QAAA,GACK,IAAI,CAACR,KAAK,CAACC,YAAY,EAAC,GAAC,EAAC,IAAI,CAACF,KAAK,CAACU,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC7C,eACLlB,OAAA;QAAQmB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACX,WAAW,EAAG;QAAAK,QAAA,EACrC,IAAI,CAACR,KAAK,CAACE;MAAU;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACjB;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACP;EAEd;AACJ;AAEA,eAAejB,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}
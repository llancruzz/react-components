{"ast":null,"code":"var _jsxFileName = \"/workspace/react-components/react-components/src/components/StatefulGreetingWithCallback.js\";\nimport React from \"react\";\n\n// Creating a Class Componet\n// Extending & render() Method\n// Usining this to Access Props\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass StatefulGreetingWithCallback extends React.Component {\n  // Adding state\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Initial State. It will represent the initial values of anything the component might change either\n      // on its own or due to user interaction.\n      introduction: \"Hello!\",\n      buttonText: \"Exit\"\n    };\n  }\n  // Never update the state directly, use the setState method instead\n  handleClick() {\n    this.setState({\n      introduction: \"Goodbye!\",\n      buttonText: \"Enter\"\n    },\n    // Put any code in setState callback that needs to run after the state update\n    () => {\n      console.log(\"new state\", this.state.introduction);\n      console.log(\"new state\", this.state.buttonText);\n    });\n    console.log(this.state.introduction);\n    console.log(this.state.buttonText);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [this.state.introduction, \" \", this.props.greeting]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.handleClick(),\n        children: this.state.buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default StatefulGreetingWithCallback;\n\n/*\nUpdating the State:\n1.| Add the onClick attribute to the button\n2.| Write an event handler to listen for the click event\n3.| Use setState() in the event handler to update the state\n\nRules:\n1.| Never update the state directly, use the setState() method instead\n2.| Put any code in setState callback that needs to run after the state update\n3.| Use a callback function in setState with prevState i\n*/","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","StatefulGreetingWithCallback","Component","constructor","props","state","introduction","buttonText","handleClick","setState","console","log","render","children","greeting","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["/workspace/react-components/react-components/src/components/StatefulGreetingWithCallback.js"],"sourcesContent":["import React from \"react\";\n\n// Creating a Class Componet\n// Extending & render() Method\n// Usining this to Access Props\nclass StatefulGreetingWithCallback extends React.Component {\n  // Adding state\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Initial State. It will represent the initial values of anything the component might change either\n      // on its own or due to user interaction.\n      introduction: \"Hello!\",\n      buttonText: \"Exit\",\n    };\n  }\n  // Never update the state directly, use the setState method instead\n  handleClick() {\n    this.setState(\n      {\n        introduction: \"Goodbye!\",\n        buttonText: \"Enter\",\n      },\n      // Put any code in setState callback that needs to run after the state update\n      () => {\n        console.log(\"new state\", this.state.introduction);\n        console.log(\"new state\", this.state.buttonText);\n      }\n    );\n    console.log(this.state.introduction);\n    console.log(this.state.buttonText);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>\n          {this.state.introduction} {this.props.greeting}\n        </h1>\n        <button onClick={() => this.handleClick()}>\n          {this.state.buttonText}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default StatefulGreetingWithCallback;\n\n/*\nUpdating the State:\n1.| Add the onClick attribute to the button\n2.| Write an event handler to listen for the click event\n3.| Use setState() in the event handler to update the state\n\nRules:\n1.| Never update the state directly, use the setState() method instead\n2.| Put any code in setState callback that needs to run after the state update\n3.| Use a callback function in setState with prevState i\n*/"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,4BAA4B,SAASH,KAAK,CAACI,SAAS,CAAC;EACzD;EACAC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACX;MACA;MACAC,YAAY,EAAE,QAAQ;MACtBC,UAAU,EAAE;IACd,CAAC;EACH;EACA;EACAC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,QAAQ,CACX;MACEH,YAAY,EAAE,UAAU;MACxBC,UAAU,EAAE;IACd,CAAC;IACD;IACA,MAAM;MACJG,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAI,CAACN,KAAK,CAACC,YAAY,CAAC;MACjDI,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAI,CAACN,KAAK,CAACE,UAAU,CAAC;IACjD,CAAC,CACF;IACDG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,KAAK,CAACC,YAAY,CAAC;IACpCI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,KAAK,CAACE,UAAU,CAAC;EACpC;EAEAK,MAAMA,CAAA,EAAG;IACP,oBACEZ,OAAA;MAAAa,QAAA,gBACEb,OAAA;QAAAa,QAAA,GACG,IAAI,CAACR,KAAK,CAACC,YAAY,EAAC,GAAC,EAAC,IAAI,CAACF,KAAK,CAACU,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC3C,eACLlB,OAAA;QAAQmB,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACX,WAAW,EAAG;QAAAK,QAAA,EACvC,IAAI,CAACR,KAAK,CAACE;MAAU;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACf;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACL;EAEV;AACF;AAEA,eAAejB,4BAA4B;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}